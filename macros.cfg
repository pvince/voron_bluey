# ----------------------------- Start of Mainsail configuration macro -----------------------------
[gcode_macro _CLIENT_VARIABLE]
variable_use_custom_pos   : True  ; use custom park coordinates for x,y [True/False]
variable_custom_park_x    : 340.0 ; custom x position; value must be within your defined min and max of X
variable_custom_park_y    : 340.0 ; custom y position; value must be within your defined min and max of Y
variable_custom_park_dz   : 2.0   ; custom dz value; the value in mm to lift the nozzle when move to park position
variable_retract          : 2.0   ; the value to retract while PAUSE
variable_cancel_retract   : 5.0   ; the value to retract while CANCEL_PRINT
variable_speed_retract    : 35.0  ; retract speed in mm/s
variable_unretract        : 3.0   ; the value to unretract while RESUME
variable_speed_unretract  : 35.0  ; unretract speed in mm/s
variable_speed_hop        : 15.0  ; z move speed in mm/s
variable_speed_move       : 100.0 ; move speed in mm/s
variable_park_at_cancel   : True  ; allow to move the toolhead to park while execute CANCEL_PRINT [True/False]
variable_park_at_cancel_x : None  ; different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True
variable_park_at_cancel_y : None  ; different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True
# !!! Caution [firmware_retraction] must be defined in the printer.cfg if you set use_fw_retract: True !!!
variable_use_fw_retract   : False ; use fw_retraction instead of the manual version [True/False]
variable_idle_timeout     : 43200 ; time in sec until idle_timeout kicks in. Value 0 means that no value will be set or restored
variable_runout_sensor    : "filament_motion_sensor encoder_sensor"    ; If a sensor is defined, it will be used to cancel the execution of RESUME in case no filament is detected.
#                                   Specify the config name of the runout sensor e.g "filament_switch_sensor runout". Hint use the same as in your printer.cfg
# !!! Custom macros, please use with care and review the section of the corresponding macro.
# These macros are for simple operations like setting a status LED. Please make sure your macro does not interfere with the basic macro functions.
# Only  single line commands are supported, please create a macro if you need more than one command.
variable_user_pause_macro : "_PRINT_PAUSED"    ; Everything inside the "" will be executed after the klipper base pause (PAUSE_BASE) function
variable_user_resume_macro: "_PRINT_RESUMED"    ; Everything inside the "" will be executed before the klipper base resume (RESUME_BASE) function
variable_user_cancel_macro: "_PRINT_CANCELLED"    ; Everything inside the "" will be executed before the klipper base cancel (CANCEL_PRINT_BASE) function
gcode:
# ----------------------------- End of Mainsail configuration macro -----------------------------

[gcode_macro _BLUEY]
# ---------- Bluey Configuration Settings ----------
variable_zoffset_smooth_abs     :     0
variable_zoffset_smooth_petg    :     0
variable_zoffset_smooth_pla     :     0
variable_zoffset_textured_abs   : -0.15
variable_zoffset_textured_petg  : -0.15
variable_zoffset_textured_pla   :     0
# ---------- Bluey Filament Settings -----------------
; Filament type is assumed to be PLA.
;   If bed temperature is set >thresh_abs, type = ABS
;   ElseIf bed temperature is set >thresh_petg, type = PETG
variable_temp_thresh_petg     :    80
variable_temp_thresh_abs      :   100
# ---------- Bluey State Settings -----------------
variable_state_filament_type  : "PLA" ; Supported types: PLA, PETG, ABS
variable_state_zoffset        :     0 ; Z offset is based on filament type & bed type
gcode:


#####################################################################
#   Macros
#####################################################################
[include klicky-probe.cfg]
[include heatsoak.cfg]
[include nozzle_scrub.cfg]

[gcode_macro G32]
description: Voron all axis home, QGL, then home all axis again.
gcode:
    SAVE_GCODE_STATE NAME=STATE_G32
    G90
    G28
    QUAD_GANTRY_LEVEL
    G28
    #--------------------------------------------------------------------
    ##  Uncomment for 350mm build
    G0 X175 Y175 Z30 F3600
    #--------------------------------------------------------------------
    RESTORE_GCODE_STATE NAME=STATE_G32


[gcode_macro _BLUEY_STATE_SETUP]
gcode:
    ; Grab the bluey collection
    {% set bluey = printer["gcode_macro _BLUEY"]  %}

    ; Get temp parameters that were added in slicer
    {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(210)|float %}
    {% set BED_TYPE = params.BED_TYPE|default("Smooth High Temp Plate") %}

    ; -------- Determine filament type from bed temperature --------
    {% set FILAMENT_TYPE = "PLA" %}
    {% if BED_TEMP >= bluey.temp_thresh_abs %}
      {% set FILAMENT_TYPE = "ABS" %}
    {% elif BED_TEMP >= bluey.temp_thresh_petg %}
      {% set FILAMENT_TYPE = "PETG" %}
    {% else %}
      {% set FILAMENT_TYPE = "PLA" %}
    {% endif %}
    SET_GCODE_VARIABLE MACRO=_BLUEY VARIABLE=state_filament_type VALUE="'{FILAMENT_TYPE}'"

    ; -------- Z-offset by filament & bed type --------
    {% set Z_OFFSET = 0 %}
    ; PLA
    {% if FILAMENT_TYPE == "PLA" %}
      {% if BED_TYPE == "Textured Cool Plate" or
            BED_TYPE == "Textured PEI Plate" %}
        {% set Z_OFFSET = bluey.zoffset_textured_pla %}
      {% else %}
        {% set Z_OFFSET = bluey.zoffset_smooth_pla %}
      {% endif %}

    ; ABS
    {% elif FILAMENT_TYPE == "ABS" %}
      {% if BED_TYPE == "Textured Cool Plate" or
            BED_TYPE == "Textured PEI Plate" %}
        {% set Z_OFFSET = bluey.zoffset_textured_abs %}
      {% else %}
        {% set Z_OFFSET = bluey.zoffset_smooth_abs %}
      {% endif %}

    ; PETG
    {% elif FILAMENT_TYPE == "PETG" %}
      {% if BED_TYPE == "Textured Cool Plate" or
            BED_TYPE == "Textured PEI Plate" %}
        {% set Z_OFFSET = bluey.zoffset_textured_petg %}
      {% else %}
        {% set Z_OFFSET = bluey.zoffset_smooth_petg %}
      {% endif %}
    {% else %}
      ERROR "Bluey state config error, Unknown filament type: {FILAMENT_TYPE}."
    {% endif %}
    SET_GCODE_VARIABLE MACRO=_BLUEY VARIABLE=state_zoffset VALUE={Z_OFFSET}

    M118 "BLUEY_STATE_SETUP( {bluey} )"

[gcode_macro PRINT_WARMUP]
description: Pre-heats the printer, optionally waiting for printer to reach its heat soak target
gcode:
    CLEAR_PAUSE

    ; Get temp parameters that were added in slicer
    {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(210)|float %}
    {% set BED_TYPE = params.BED_TYPE|default("High Temp Plate") %}

    _BLUEY_STATE_SETUP BED_TEMP={BED_TEMP} EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TYPE="{BED_TYPE}"
    {% set bluey = printer["gcode_macro _BLUEY"]  %}

    ; Tell the bed fans to stop running in 'filter' mode
    STOP_FILTER

    ; Print out the current print's provided variables
    M118 PRINT_WARMUP( BED_TEMP={BED_TEMP}, EXTRUDER_TEMP={EXTRUDER_TEMP}, BED_TYPE={BED_TYPE} )

    ; Start heating up extruder & bed
    M104 S{EXTRUDER_TEMP * 0.75}      # Set extruder temperature to 75%
    M140 S{BED_TEMP}                  # Start heating the bed up

    ; Home XYZ
    G28

    ; If we have a high bed temperature, that indicates we are printing with ABS
    ; and we need to heat soak the chamber.
    {% if bluey.state_filament_type == "ABS" %}
      M117 Waiting on bed@[{BED_TEMP}C] & chamber [40C]
      _set_sb_leds_by_name leds="logo" color="purple" transmit=1
      HEAT_SOAK HEATER='heater_bed' TARGET={BED_TEMP} SOAKER='temperature_sensor chamber_temp' SOAK_TEMP=40
    {% else %}
      M117 Skipping heat soak
    {% endif %}

   
[gcode_macro PRINT_START]
#   Use PRINT_START for the slicer starting script - please customise for your slicer of choice
gcode:
    ; Get temp parameters that were added in slicer
    {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(210)|float %}
    {% set BED_TYPE = params.BED_TYPE|default("High Temp Plate") %}

    _BLUEY_STATE_SETUP BED_TEMP={BED_TEMP} EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TYPE="{BED_TYPE}"
    {% set bluey = printer["gcode_macro _BLUEY"]  %}

    _set_sb_leds_by_name leds="logo" color="blue" transmit=1

    ; Print out the current print's provided variables
    M118 PRINT_START( BED_TEMP={BED_TEMP}, EXTRUDER_TEMP={EXTRUDER_TEMP}, BED_TYPE={BED_TYPE} )

    ; Start by ensuring heated bed is going.
    M140 S{BED_TEMP}

    {% if bluey.state_filament_type == "PLA" %}
      ; If printing with a low temperature material, turn on the exhaust fan to
      ; a higher level to keep the chamber temperature down.
      SET_FAN_SPEED FAN=exhaust_fan SPEED=0.5
    {% else%}
      ; If printing with a high temperature material, only turn on the exhaust fan enough to
      ; ensure negative pressure
      SET_FAN_SPEED FAN=exhaust_fan SPEED=0.1
    {% endif %}

    ; ------- Start bed and extruder heating -------
    M117 Starting pre-print sequence....

    M104 S{EXTRUDER_TEMP * 0.75}

    ; Home XYZ
    ; - Could be replaced with CHOME, but I generally feel it is better to be safe
    ;   here. There is a potential of a blob on the nozzle screwing w/ the Z-axis
    ;   homing. Maybe consider heating the nozzle, wiping it, then homing XYZ?
    CHOME
    
    ; ------- Wait for bed to reach temp -------
    M117 Waiting for bed to reach {BED_TEMP}C...
    _set_sb_leds_by_name leds="logo" color="orange" transmit=1
    M190 S{BED_TEMP}

    ; Now that bed is up to temperature, trigger QGL.
    M117 Initiated QGL...
    QUAD_GANTRY_LEVEL

    ; Home XY after QGL, wait for extruder to get  wiped before Z
    G28 X Y

    ; ===================================================================
    ; The next major step is calibrating the Z-offset. In order for this
    ; to be accurate, the nozzle must be at its final print temperature.
    
    ; ------- Wait for extruder to reach actual print temp -------
    ; First move over the purge bucket
    G1 X350 Y350 Z20

    M117 Waiting for extruder to reach {EXTRUDER_TEMP}C (Z-probe)...
    _set_sb_leds_by_name leds="logo" color="gold" transmit=1
    M109 S{EXTRUDER_TEMP}

    ; ------- Nozzle is at temperature now -------
    CLEAN_NOZZLE

    ; Finally, We need to home XYZ after QGL
    G28 Z

    ; Run Auto Z-Calibration
    M117 Calibrating Z-Offset
    CALIBRATE_Z

    ; Now that the Z-offset is calibrated, we can let the nozzle cool down
    ; to reduce stringing.
    _set_sb_leds_by_name leds="logo" color="orange" transmit=1
    M104 S{EXTRUDER_TEMP * 0.75}      # Set extruder temperature to 75%
    
    ; ===================================================================
    ; Use calculated & adjusted Z-Offset
    M118 "Bed type is [{BED_TYPE}] - Setting offset to {bluey.state_zoffset}"
    SET_GCODE_OFFSET Z={bluey.state_zoffset}

    ; ===================================================================
    ; Create bed mesh, TODO: Adaptive meshing
    M117 Creating bed mesh
    BED_MESH_CALIBRATE

    ; ------- Wait for extruder to reach actual print temp -------
    ; First move over the purge bucket
    G1 X350 Y350 Z20 F7000

    M117 Waiting for extruder to reach {EXTRUDER_TEMP}C...
    _set_sb_leds_by_name leds="logo" color="green" transmit=1
    M109 S{EXTRUDER_TEMP}

    ; We are right about to start printing... lets wipe the nozzle one last time.
    CLEAN_NOZZLE

    ; Load the Skew profile from the CaliLantern
    SKEW_PROFILE LOAD=calilantern_skew_profile

    ; TODO: Print purge line

    ; ------- Finished with PRINT_START -------
    G90                       ; absolute positioning
    G1 X175 Y175 Z20 F7000    ; move nozzle to bed center

    ; Turn on the nozzle light to max brightness
    M117 Printing...
    _HEADLIGHT_ON
   

[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
gcode:
    # safe anti-stringing move coords
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}
    
    SAVE_GCODE_STATE NAME=STATE_PRINT_END
    
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-5.0 F1800                 ; retract filament
    
    TURN_OFF_HEATERS
    
    G90                                      ; absolute positioning
    G0 X{x_safe} Y{y_safe} Z{z_safe} F20000  ; move nozzle to remove stringing
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600  ; park nozzle at rear
    M107                                     ; turn off fan
    
    BED_MESH_CLEAR
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END
    SET_SKEW CLEAR=1                         ; CaliLantern profile clear

    ; Ideally this should be in a delayed macro that self-retriggers periodically
    ; This would allow it to run for a period of time after the printer finished without
    ; interfering w/ the print itself.
    SET_FAN_SPEED FAN=exhaust_fan SPEED=0.0

    set_toolhead_leds_off

    RUN_FILTER


[gcode_macro _PRINT_CANCELLED]
gcode:
  # Ensure heat soak is properly stopped
  STOP_HEAT_SOAK

  # Ensure the 'skew' settings are cleared.
  SET_SKEW CLEAR=1

  _set_sb_leds_by_name leds="logo" color="red" transmit=1

  RUN_FILTER


[gcode_macro _PRINT_PAUSED]
gcode:
  # If 'Skew' is set, then certain moves near edge of print bed will fail.
  SET_SKEW CLEAR=1


[gcode_macro _PRINT_RESUMED]
gcode:
  ; Load the Skew profile from the CaliLantern
  SKEW_PROFILE LOAD=calilantern_skew_profile


[gcode_macro ATTACH_PROBE]
rename_existing: ATTACH_PROBE_BASE
gcode:
  # Ensure the 'skew' settings are cleared.
  SET_SKEW CLEAR=1

  # Now we can attach the probe
  ATTACH_PROBE_BASE


[gcode_macro DOCK_PROBE]
rename_existing: DOCK_PROBE_BASE
gcode:
  # Ensure the 'skew' settings are cleared.
  SET_SKEW CLEAR=1

  # Now we can attach the probe
  DOCK_PROBE_BASE


[gcode_macro CALIBRATE_Z]
rename_existing: BASE_CALIBRATE_Z
gcode:
    {% set nozzle_position = params.NOZZLE_POSITION %}
    {% set switch_position = params.SWITCH_POSITION %}
    {% set bed_position = params.BED_POSITION %}
    {% set switch_offset = params.SWITCH_OFFSET %}
    CHOME
    M117 Z-Calibration..
    ATTACH_PROBE                # a macro for fetching the probe first
    BASE_CALIBRATE_Z NOZZLE_POSITION={nozzle_position} SWITCH_POSITION={switch_position} BED_POSITION={bed_position} SWITCH_OFFSET={switch_offset}
    DOCK_PROBE                # and parking it afterwards (or DOCK_PROBE in klicky macros)
    M117

[gcode_macro CHOME]
description: Homes XYZ axis only if printer is in a non-homed state
gcode:
  {% if "xyz" not in printer.toolhead.homed_axes %}
    G28
  {% endif %}

[gcode_macro FRONT]
description: Moves the toolhead to the front
gcode:
  CHOME
  {% set x_center = printer.toolhead.axis_maximum.x|float / 2.0 %}
  {% set y_center = printer.toolhead.axis_maximum.y|float / 2.0 %}
  G90
  G1 X{x_center} Y10 F7800

[gcode_macro PARK_CENTER]
description: Moves the toolhead to the x_center
gcode:
  CHOME
  {% set x_center = printer.toolhead.axis_maximum.x|float / 2.0 %}
  {% set y_center = printer.toolhead.axis_maximum.y|float / 2.0 %}
  G90
  G1 X{x_center} Y{y_center} F7800

[gcode_macro UNLOAD_FILAMENT]
description: Unloads filament from toolhead
gcode:
  {% set EXTRUDER_TEMP = params.TEMP|default(230)|int %}
  {% set MIN_TEMP = params.TEMP|default(230)|float * 0.98 %}
  {% set CURRENT_TARGET = printer.extruder.target|float %}
  CHOME
  G91                         ; relative positioning
  G1 Z20                      ; move nozzle upwards
  FRONT                       ; move the toolhead to the front
  {% if EXTRUDER_TEMP != 0 %}
    _LOGO_PENDING
    {% if CURRENT_TARGET < EXTRUDER_TEMP %}
      M104 S{EXTRUDER_TEMP} ; only heat up if the current extruder is not already hot
    {% endif %}
    TEMPERATURE_WAIT SENSOR="extruder" MINIMUM={MIN_TEMP} ; wait for min extrude temp to reach
  {% endif %}
  _LOGO_READY
  M83                         ; set extruder to relative mode
  G1 E10 F300                 ; extrude a little to soften tip
  G1 E-8 F3600                ; quickly retract a small amount to elimate stringing
  G4 P200                     ; pause for a short amount of time
  G1 E-50 F400                ; retract slowly the rest of the way
  G1 E-20 F300
  M400                        ; wait for moves to finish
  M117 Unload Complete!
  _LOGO_OFF

[gcode_macro LOAD_FILAMENT]
description: Loads new filament into toolhead
gcode:
  {% set EXTRUDER_TEMP = params.TEMP|default(230)|int %}
  {% set MIN_TEMP = params.TEMP|default(230)|float * 0.98 %}
  {% set CURRENT_TARGET = printer.extruder.target|float %}
  FRONT                       ; move the toolhead to the front
  {% if EXTRUDER_TEMP != 0 %}
    _LOGO_PENDING
    {% if CURRENT_TARGET < EXTRUDER_TEMP %}
      M104 S{EXTRUDER_TEMP} ; only heat up if the current extruder is not already hot
    {% endif %}
    TEMPERATURE_WAIT SENSOR="extruder" MINIMUM={MIN_TEMP} ; wait for min extrude temp to reach
  {% endif %}
  _LOGO_READY
  _HEADLIGHT_ON
  M83                         ; set extruder to relative mode
  G1 E50 F300                 ; extrude slowlyL
  G1 E50 F300
  M400                        ; wait for moves to finish
  M117 Load Complete!
  _LOGO_OFF
  _HEADLIGHT_OFF
